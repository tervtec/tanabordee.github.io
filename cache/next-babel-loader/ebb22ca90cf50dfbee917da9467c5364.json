{"ast":null,"code":"var i18next = require('i18next');\n\nvar path = require('path');\n\nvar XHR = require('i18next-xhr-backend');\n\nvar LanguageDetector = require('i18next-browser-languagedetector');\n\nvar i18n = i18next[\"default\"] ? i18next[\"default\"] : i18next;\nvar options = {\n  lng: 'en',\n  fallbackLng: ['th', 'en'],\n  load: 'languageOnly',\n  // we only provide en, de -> no region specific locals like en-US, de-DE\n  // have a common namespace used around the full app\n  ns: ['translator'],\n  defaultNS: 'translator',\n  backend: {\n    loadPath: path.join(__dirname, '/locales/{{lng}}/{{ns}}.json'),\n    addPath: path.join(__dirname, '/locales/{{lng}}/{{ns}}.missing.json')\n  },\n  debug: false,\n  // process.env.NODE_ENV !== 'production',\n  saveMissing: true,\n  keySeparator: false,\n  // we use content as keys\n  interpolation: {\n    escapeValue: false,\n    // not needed for react!!\n    formatSeparator: ',',\n    format: function format(value, _format) {\n      if (_format === 'uppercase') return value.toUpperCase();\n      return value;\n    }\n  },\n  react: {\n    wait: true\n  }\n}; // for browser use xhr backend to load translations and browser lng detector\n\nif (true) {\n  i18n.use(XHR) // .use(Cache)\n  .use(LanguageDetector);\n} // initialize if not already initialized\n\n\nif (!i18n.isInitialized) i18n.init(options); // a simple helper to getInitialProps passed on loaded i18n data\n\ni18n.getInitialProps = function (req, namespaces) {\n  var appNamespaces = namespaces;\n  if (!namespaces) appNamespaces = i18n.options.defaultNS;\n  if (typeof namespaces === 'string') appNamespaces = [namespaces]; // do not serialize i18next instance avoid sending it to client\n\n  if (req) req.i18n.toJSON = function () {\n    return null;\n  };\n  var ret = {\n    i18n: req ? req.i18n : i18n // use the instance on req - fixed language on request (avoid issues in race conditions with lngs of different users)\n\n  }; // for serverside pass down initial translations\n\n  if (req) {\n    var initialI18nStore = {};\n    req.i18n.languages.forEach(function (l) {\n      initialI18nStore[l] = {};\n      appNamespaces.forEach(function (ns) {\n        initialI18nStore[l][ns] = (req.i18n.services.resourceStore.data[l] || {})[ns] || {};\n      });\n    });\n    ret.initialI18nStore = initialI18nStore;\n    ret.initialLanguage = req.i18n.language;\n  }\n\n  return ret;\n};\n\nmodule.exports = i18n;","map":null,"metadata":{},"sourceType":"script"}